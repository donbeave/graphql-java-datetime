/*
 *  Copyright 2017 Alexey Zhokhov
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * @author <a href='mailto:alexey@zhokhov.com'>Alexey Zhokhov</a>
 */
plugins {
    id 'com.jfrog.bintray' version '1.7.3'
    id 'com.jfrog.artifactory' version '4.4.18'
}

subprojects {
    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'
    if (System.getenv('ARTIFACTORY_CONTEXT_URL')) {
        apply plugin: 'com.jfrog.artifactory'
    }
    apply plugin: 'groovy'

    version = projectVersion
    group = 'com.zhokhov.graphql'

    repositories {
        mavenLocal()
        jcenter()
        maven { url 'https://dl.bintray.com/andimarek/graphql-java/' }
    }

    dependencies {
        testCompile 'org.spockframework:spock-core:1.1-groovy-2.4'
        testCompile 'org.codehaus.groovy:groovy-all:2.4.12'
    }

    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }

    compileJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    if (it.name != 'graphql-datetime-sample-app') {
        jar {
            from 'LICENSE'
        }

        task sourcesJar(type: Jar) {
            dependsOn classes
            classifier 'sources'
            from sourceSets.main.allSource
        }

        task javadocJar(type: Jar, dependsOn: javadoc) {
            classifier = 'javadoc'
            from javadoc.destinationDir
        }

        artifacts {
            archives sourcesJar
            archives javadocJar
        }

        publishing {
            publications {
                mainProjectPublication(MavenPublication) {
                    version project.version
                    from components.java

                    artifact sourcesJar {
                        classifier 'sources'
                    }
                    artifact javadocJar {
                        classifier 'javadoc'
                    }

                    pom.withXml {
                        // Fix dependency scoping.
                        asNode().dependencies.'*'.findAll() {
                            it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
                                dep.name == it.artifactId.text()
                            }
                        }.each() {
                            it.scope*.value = 'compile'
                        }

                        asNode().children().last() + {
                            resolveStrategy = Closure.DELEGATE_FIRST
                            name projectName
                            description projectDescription
                            url projectGitRepoUrl
                            scm {
                                url projectGitRepoUrl
                                connection projectGitRepoUrl
                                developerConnection projectGitRepoUrl
                            }
                            licenses {
                                license {
                                    name projectLicense
                                    url projectLicenseUrl
                                    distribution 'repo'
                                }
                            }
                            developers {
                                developer {
                                    id 'donbeave'
                                    name 'Alexey Zhokhov'
                                }
                            }
                        }
                    }
                }
            }
        }

        bintray {
            user = System.getenv('BINTRAY_USER') ?: project.findProperty('BINTRAY_USER') ?: ''
            key = System.getenv('BINTRAY_KEY') ?: project.findProperty('BINTRAY_KEY') ?: ''
            publications = ['mainProjectPublication']
            publish = true
            override = true
            pkg {
                repo = 'maven'
                name = projectName
                desc = projectDescription
                licenses = [projectLicense]
                vcsUrl = projectGitRepoUrl
                version {
                    name = project.version
                }
            }
        }

        if (System.getenv('ARTIFACTORY_CONTEXT_URL')) {
            artifactory {
                contextUrl = System.getenv('ARTIFACTORY_CONTEXT_URL')

                publish {
                    defaults {
                        publications('mainProjectPublication')
                        publishArtifacts = true
                        publishPom = true

                    }
                    repository {
                        repoKey = "${version.contains('SNAPSHOT') ? (System.getenv('ARTIFACTORY_SNAPSHOT_REPO_KEY') ?: 'libs-snapshot-local') : (System.getenv('ARTIFACTORY_RELEASE_REPO_KEY') ?: 'libs-release-local')}"
                        username = System.getenv('ARTIFACTORY_USERNAME') ?: 'admin'
                        password = System.getenv('ARTIFACTORY_PASSWORD') ?: 'password'
                    }
                }
            }
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = gradleWrapperVersion
}
